#!/usr/bin/env sh
# Bash Static Site Generator - entry point
# Required tools for entrypoint: cat date dirname readlink tr sort mv rm

echo ' :: Checking required tools'
	for tool in 'dirname' 'readlink'; do
		echo -n "Checking '${tool}'"

		if ! command -v "${tool}" > /dev/null 2>&1; then
			echo ' [FAIL]'
			exit 1
		fi

		echo ' [ OK ]'
	done

# global variables (you can rewrite in database/defaults.rc.d)
	export SSG__root="$(dirname "$(readlink -f "${0}")")"
	export SSG__modules="${SSG__root}/modules"
	export SSG__database="${SSG__root}/database"
	export SSG__user_modules="${SSG__database}/modules"
	export SSG__generated="${SSG__root}/generated"
	export SSG__lib="${SSG__root}/lib"
	[ -d "${SSG__root}/bin" ] && \
		export PATH="${SSG__root}/bin:${PATH}"

# check entrypoint tools
	for tool in 'cat' 'date' 'tr' 'sort' 'mv' 'rm'; do
		echo -n "Checking '${tool}'"

		if ! command -v "${tool}" > /dev/null 2>&1; then
			echo ' [FAIL]'
			exit 1
		fi

		echo ' [ OK ]'
	done

# execution time measurement (1)
	entrypoint_start_time="$(date '+%s' 2>/dev/null)"

# local variables
	entrypoint_check_modules='true'
	entrypoint_check_tools='true'

	. "${SSG__lib}/import-defaults.rc"

# functions
	check_disabled_modules()
	{
		local module

		for module in ${2}; do
			[ "${1}" = "${module}" ] && return '1'
		done

		return '0'
	}

# database check
	if [ ! -e "${SSG__database}" ]; then
		echo "error: '${SSG__database}' directory does not exist"
		exit 1
	fi

# modules tools check
	if "${entrypoint_check_tools}"; then
		echo ' :: Checking required modules tools'
		module_required_tools=''

		[ -e "${SSG__database}/command-stack" ] && \
			module_required_tools="$(cat "${SSG__database}/command-stack")"

		for module in ${SSG__modules}/* ${SSG__user_modules}/*; do
			[ "${module}" = "${SSG__modules}/*" ] && continue
			[ "${module}" = "${SSG__user_modules}/*" ] && break

			[ -e "${module}/command-stack" ] && \
				check_disabled_modules "${module##*/}" "${defaults__disabled_modules}" && \
				module_required_tools="${module_required_tools} $(cat "${module}/command-stack")"
		done

		if [ ! "${module_required_tools}" = '' ]; then
			module_required_tools="$(echo -n "${module_required_tools}" | tr ' ' '\n' | sort -u)"

			for tool in ${module_required_tools}; do
				echo -n "Checking '${tool}'"

				if ! command -v "${tool}" > /dev/null 2>&1; then
					echo ' [FAIL]'

					echo -n 'Continue anyway? (y/[N]) '
					read answer
					[ ! "${answer}" = 'y' ] && exit 1
					unset 'answer'

					break
				fi

				echo ' [ OK ]'
			done
		fi

		unset 'module_required_tools'
		unset 'tool'
	fi

# module dependencies check
	if "${entrypoint_check_modules}"; then
		echo ' :: Checking modules dependencies'

		for module in ${SSG__modules}/* ${SSG__user_modules}/*; do
			[ "${module}" = "${SSG__modules}/*" ] && continue
			[ "${module}" = "${SSG__user_modules}/*" ] && break

			if [ ! -e "${module}/dependencies" ] || ! check_disabled_modules "${module##*/}" "${defaults__disabled_modules}"; then
				continue
			fi

			echo -n "Checking module ${module##*/}"

			if ! \
				cat "${module}/dependencies" | while read 'dependent_module'; do
					if [ ! -e "${SSG__modules}/${dependent_module}" ] && [ ! -e "${SSG__user_modules}/${dependent_module}" ]; then
						echo -n " (failed on ${dependent_module} module) "
						exit 1
					fi
				done
			then
				echo ' [FAIL]'

				echo -n 'Continue anyway? (y/[N]) '
				read answer
				[ ! "${answer}" = 'y' ] && exit 1
				unset 'answer'

				break
			fi

			echo ' [ OK ]'
		done
	fi

if [ -e "${SSG__database}/generate-hooks/pre-generate.rc" ]; then
	echo ' :: Starting pre-generate hook'
	. "${SSG__database}/generate-hooks/pre-generate.rc"
fi

# output directory
	[ -e "${SSG__generated}" ] && if "${defaults__archive_old_generated}"; then
		echo ' :: Archiving previously generated files'
		mv "${SSG__generated}" "${SSG__generated}-$(date '+%Y%m%d%H%M%S')"
	else
		echo ' :: Removing previously generated files'
		rm -r ${SSG__generated}/* > /dev/null 2>&1
	fi

# modules generators
	for module in ${SSG__modules}/* ${SSG__user_modules}/*; do
		[ "${module}" = "${SSG__modules}/*" ] && echo 'No modules installed'
		[ ! -x "${module}/generate" ] && continue

		module_name="${module##*/}"

		if ! check_disabled_modules "${module_name}" "${defaults__disabled_modules}"; then
			echo " :: ${module_name} module is disabled"
			continue
		fi

		echo " :: Running ${module_name} module"
		"${module}/generate"

		[ "$?" = '0' ] && \
			echo " :: ${module_name} module ended" || \
			echo " :: ${module_name} module failed"

		if [ -e "${SSG__generated}/.reimport-defaults" ]; then
			echo ' :: Re-importing defaults variables'
			. "${SSG__lib}/import-defaults.rc"
			rm "${SSG__generated}/.reimport-defaults"
		fi
	done

if [ -e "${SSG__database}/generate-hooks/post-generate.rc" ]; then
	echo ' :: Starting post-generate hook'
	. "${SSG__database}/generate-hooks/post-generate.rc"
fi

# default module check
	[ "${defaults__home_module}" = '' ] && \
		echo "error: default module '${defaults__home_module}' is not defined" && \
		exit 1

	[ ! -e "${SSG__modules}/${defaults__home_module}" ] && [ ! -e "${SSG__user_modules}/${defaults__home_module}" ] && \
		echo "error: default module '${defaults__home_module}' not found in modules" && \
		exit 1

# execution time measurement (2)
	[ ! "${entrypoint_start_time}" = '' ] && \
		echo " :: Script executed in $(($(date '+%s')-entrypoint_start_time)) seconds"

exit 0
