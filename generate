#!/usr/bin/env sh
# Bash Static Site Generator - entry point
# 2021 2024 MissKittin@GitHub
# Required tools for entrypoint: date dirname readlink tr sort cat mv rm

echo ' :: Checking required tools'
for tool in 'dirname' 'readlink'; do
	echo -n "Checking '${tool}'"

	if command -v "${tool}" > /dev/null 2>&1; then
		echo ' [ OK ]'
	else
		echo ' [FAIL]'
		exit 1
	fi
done

# global variables (you can rewrite in database/defaults.rc.d)
	export SSG__root="$(dirname "$(readlink -f "${0}")")"
	export SSG__modules="${SSG__root}/modules"
	export SSG__database="${SSG__root}/database"
	export SSG__user_modules="${SSG__database}/modules"
	export SSG__generated="${SSG__root}/generated"
	export SSG__lib="${SSG__root}/lib"
	[ -d "${SSG__root}/bin" ] && export PATH="${SSG__root}/bin:${PATH}"

# execution time measurement (1)
	entrypointStartTime="$(date '+%s')"

# local variables
	entrypointCheckModules='true'
	entrypointCheckTools='true'
	. "${SSG__lib}/import-defaults.rc"

# functions
	check_disabled_modules()
	{
		local module
		for module in ${2}; do
			[ "${1}" = "${module}" ] && return '1'
		done
		return '0'
	}

# tools check
	if "${entrypointCheckTools}"; then
		echo ' :: Checking required tools'
		moduleRequiredTools='date tr sort cat mv rm' # for entrypoint

		for module in ${SSG__modules}/* ${SSG__user_modules}/*; do
			[ "${module}" = "${SSG__modules}/*" ] && continue
			[ "${module}" = "${SSG__user_modules}/*" ] && break
			[ -e "${module}/command-stack" ] && check_disabled_modules "${module##*/}" "${defaults__disabled_modules}" && moduleRequiredTools="${moduleRequiredTools} $(cat "${module}/command-stack")"
		done

		if [ ! "${moduleRequiredTools}" = '' ]; then
			moduleRequiredTools="$(echo -n "${moduleRequiredTools}" | tr ' ' '\n' | sort -u)"

			for tool in ${moduleRequiredTools}; do
				echo -n "Checking '${tool}'"

				if command -v "${tool}" > /dev/null 2>&1; then
					echo ' [ OK ]'
				else
					echo ' [FAIL]'
					echo -n 'Continue anyway? (y/[N]) '
					read answer
					[ ! "${answer}" = 'y' ] && exit 1
					unset 'answer'
					break
				fi
			done
		fi

		unset 'moduleRequiredTools'
		unset 'tool'
	fi

# module dependencies check
	if "${entrypointCheckModules}"; then
		echo ' :: Checking modules dependencies'
		for module in ${SSG__modules}/* ${SSG__user_modules}/*; do
			[ "${module}" = "${SSG__modules}/*" ] && continue
			if [ -e "${module}/dependencies" ] && check_disabled_modules "${module##*/}" "${defaults__disabled_modules}"; then
				echo -n "Checking module ${module##*/}"
				if ! \
					cat "${module}/dependencies" | while read dependentModule; do
						if [ ! -e "${SSG__modules}/${dependentModule}" ]; then
							echo -n " (failed on ${dependentModule} module) "
							exit 1
						fi
					done
				then
					echo ' [FAIL]'
					echo -n 'Continue anyway? (y/[N]) '
					read answer
					[ ! "${answer}" = 'y' ] && exit 1
					unset 'answer'
					break
				else
					echo ' [ OK ]'
				fi
			fi
		done
	fi

if [ -e "${SSG__database}/generate-hooks/pre-generate.rc" ]; then
	echo ' :: Starting pre-generate hook'
	. "${SSG__database}/generate-hooks/pre-generate.rc"
fi

# output directory
	[ -e "${SSG__generated}" ] && if "${defaults__archive_old_generated}"; then
		echo ' :: Archiving previously generated files'
		mv "${SSG__generated}" "${SSG__generated}-$(date '+%Y%m%d%H%M%S')"
	else
		echo ' :: Removing previously generated files'
		rm -r ${SSG__generated}/* > /dev/null 2>&1
	fi

# modules generators
	for module in ${SSG__modules}/* ${SSG__user_modules}/*; do
		[ "${module}" = "${SSG__modules}/*" ] && echo 'No modules installed'
		if [ -x "${module}/generate" ]; then
			moduleName="${module##*/}"
			if check_disabled_modules "${moduleName}" "${defaults__disabled_modules}"; then
				echo " :: Running ${moduleName} module"
				"${module}/generate"
				if [ "$?" = '0' ]; then
					echo " :: ${moduleName} module ended"
				else
					echo " :: ${moduleName} module failed"
				fi

				if [ -e "${SSG__generated}/.reimport-defaults" ]; then
					echo ' :: Re-importing defaults variables'
					. "${SSG__lib}/import-defaults.rc"
					rm "${SSG__generated}/.reimport-defaults"
				fi
			else
				echo " :: ${moduleName} module is disabled"
			fi
		fi
	done

if [ -e "${SSG__database}/generate-hooks/post-generate.rc" ]; then
	echo ' :: Starting post-generate hook'
	. "${SSG__database}/generate-hooks/post-generate.rc"
fi

# default module check
	if [ "${defaults__home_module}" = '' ]; then
		echo "error: default module '${defaults__home_module}' is not defined"
		exit 1
	fi
	if [ ! -e "${SSG__modules}/${defaults__home_module}" ] && [ ! -e "${SSG__user_modules}/${defaults__home_module}" ]; then
		echo "error: default module '${defaults__home_module}' not found in modules"
		exit 1
	fi

# execution time measurement (2)
	[ ! "${entrypointStartTime}" = '' ] && echo " :: Script executed in $(($(date '+%s')-entrypointStartTime)) seconds"

exit 0
